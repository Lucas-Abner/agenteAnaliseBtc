import os
import logging
from datetime import datetime

import pandas as pd
import numpy as np
import yfinance as yf

from crewai import Agent, Task, Crew, Process, LLM
from crewai.tools import tool
from crewai_tools import ScrapeWebsiteTool
import os

# ========== Configura√ß√µes ==========

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# Override de vari√°veis de ambiente
os.environ["OPENAI_API_KEY"] = "NA"
os.environ["CREWAI_LLM_PROVIDER"] = "ollama"
os.environ["CREWAI_EMBEDDINGS_PROVIDER"] = "ollama"
os.environ["CREW_DISABLE_TELEMETRY"] = "True"
os.environ["CREWAI_API_BASE"] = "http://localhost:11434"
#os.environ["CREWAI_TELEMETRY"] = "False"

# Inicializa√ß√£o do LLM
llm = LLM(
    model="ollama/mistral:latest",
    api_base=os.getenv("CREWAI_API_BASE"),
    stream=True,
    timeout=120,
    temperature=0.7,
    max_tokens=1000
)


# ========== Fun√ß√µes auxiliares ==========
def fetch_price_history(symbol: str, period: str) -> pd.DataFrame:
    """
    Busca o hist√≥rico de pre√ßos de um ativo via yfinance.
    """
    ticker = yf.Ticker(symbol)
    df = ticker.history(period=period)
    if df.empty:
        raise ValueError(f"N√£o foi poss√≠vel obter dados para '{symbol}'.")
    df.index = pd.to_datetime(df.index).strftime("%Y-%m-%d")
    return df


def compute_indicators(df: pd.DataFrame) -> pd.DataFrame:
    """
    Adiciona colunas de indicadores t√©cnicos no DataFrame:
      - MM50 e MM200
      - RSI14
      - Bandas de Bollinger
    """
    df["MM50"] = df["Close"].rolling(window=50).mean()
    df["MM200"] = df["Close"].rolling(window=200).mean()

    delta = df["Close"].diff()
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df["RSI14"] = 100 - (100 / (1 + rs))

    rolling20 = df["Close"].rolling(window=20)
    df["BB_middle"] = rolling20.mean()
    df["BB_std"] = rolling20.std()
    df["BB_upper"] = df["BB_middle"] + 2 * df["BB_std"]
    df["BB_lower"] = df["BB_middle"] - 2 * df["BB_std"]

    return df

# ========== Tool para o CrewAI ==========
@tool
def view_acao(moeda: str, periodo: str) -> str:
    """
    Puxa o hist√≥rico de pre√ßos de um ativo via yfinance e calcula indicadores:
      - MM50 e MM200
      - RSI14
      - Bandas de Bollinger

    Par√¢metros:
    - moeda: s√≠mbolo da a√ß√£o/criptomoeda (ex: "BTC-USD")
    - periodo: per√≠odo do hist√≥rico (ex: "1y")

    Retorna:
    - String formatada com √∫ltimos dados.
    """
    try:
        df = fetch_price_history(moeda, periodo)
        df = compute_indicators(df)
    except Exception as e:
        return f"‚ùå Erro: {e}"

    last_close = df["Close"].iloc[-1]
    last_mm50 = df["MM50"].iloc[-1]
    last_mm200 = df["MM200"].iloc[-1]
    pct_change = (last_close / df["Close"].iloc[0] - 1) * 100

    return (
        f"üìä Dados para {moeda} em {periodo}:\n"
        f"- √öltimo fechamento: {last_close:.2f}\n"
        f"- MM50: {last_mm50:.2f} | MM200: {last_mm200:.2f}\n"
        f"- Varia√ß√£o no per√≠odo: {pct_change:.2f}%\n"
    )


busca_noticia = ScrapeWebsiteTool(website_url="https://br.cointelegraph.com/tags/bitcoin")

# ========== Configura√ß√£o do Agente ==========
especialista_noticia = Agent(
    role="Especialista em buscar noticias sobre bitcoin",
    goal="Analisar noticias que encontrar pela web sobre o bitcoin, seja ela positiva ou negativa perante sua analise. Isso ajudar√° na tomada de decis√£o",
    backstory="""
    Voc√™ parece que nasceu para isso, para buscar noticias sobre o bitcoin e saber como essa noticia vai influenciar na descida ou subida do mesmo.
    """,
    verbose=True,
    memory=True,
    allow_delegation=False,
    tools=[busca_noticia],
    llm=llm,
    max_iter=2
)

procurando_noticias = Task(
    description="""
    Sua tarefa √© realizar uma busca r√°pida sobre as not√≠cias mais recentes relacionadas ao Bitcoin.

    Etapas:
    1. Acesse as p√°ginas de busca do site fornecido.
    2. Leia apenas os **2 primeiros artigos de cada site**.
    Seja objetivo, profissional e evite termos vagos. Foque na clareza e relev√¢ncia.
    """,
    expected_output=f"""
    1. Lista das 3 not√≠cias mais relevantes com resumo, classifica√ß√£o e link.
    2. An√°lise final sobre o sentimento predominante e poss√≠veis impactos.
    3. Retorne o que foi achado por voc√™ para o pr√≥ximo agente para auxiliar em sua analise. 
    """,
    agent=especialista_noticia
)

especialista_trading = Agent(
    role="Especialista em An√°lise de Criptomoedas",
    goal=(
        "Fornecer an√°lise de BTC-USD com indicadores t√©cnicos "
        "e gerar recomenda√ß√µes."
    ),
    backstory=(
        "15 anos de experi√™ncia em an√°lise de ativos digitais, "
        "otimizando riscos e retornos."
    ),
    verbose=True,
    memory=True,
    allow_delegation=False,
    llm=llm,
    tools=[view_acao]
)

# ========== Tarefa ==========
analise_trading = Task(
    description=(
        "1. Use view_acao para ver a criptomoeda {moeda} no periodo de {periodo}.\n"
        "2. Recalcule MM50, MM200, RSI14, Bollinger.\n"
        "3. Gere gr√°fico de Close com MM50/MM200.\n"
        "4. Interprete tend√™ncias e sinais t√©cnicos.\n"
        "5. Resuma em 3-5 frases e recomende buy/hold/sell."
    ),
    expected_output=(
        "1. Resumo executivo\n"
        "2. Principais indicadores\n"
        "3. An√°lise de tend√™ncia\n"
        "4. Recomenda√ß√£o final"
    ),
    agent=especialista_trading,
    output_file="analise_btc.txt"
)

especialista_decisao = Agent(
    role="Especialista em tomada de decis√£o sobre Bitcoin",
    goal="Integrar a analise t√©cnica com a analise de noticias para chegar em uma conclus√£o.",
    backstory="""
    Voc√™ √© um analista s√™nior de investimentos, especializado em criptomoedas, respons√°vel por consolidar informa√ß√µes t√©cnicas e de mercado para orientar decis√µes financeiras estrat√©gicas.
    Seu foco √© sempre ser objetivo, preciso e fundamentado em dados.
    """,
    memory=True,
    verbose=True,
    llm=llm,
    allow_delegation=False
)

tomada_decisao = Task(
    description="""
    Sua tarefa √© consolidar as an√°lises geradas pelos outros especialistas e formular uma recomenda√ß√£o estrat√©gica sobre o Bitcoin.

    Voc√™ receber√°:

    1. A an√°lise t√©cnica do agente 'Especialista em Trading', contendo indicadores t√©cnicos, tend√™ncias e uma sugest√£o preliminar de buy/hold/sell.
    2. O relat√≥rio de not√≠cias do agente 'Especialista em buscar not√≠cias', com a classifica√ß√£o de sentimento do mercado e poss√≠veis impactos futuros.

    Com base nesses dois relat√≥rios, siga estas etapas:

    1. Resuma brevemente os principais pontos de cada relat√≥rio (m√°ximo de 3 frases cada).
    2. Identifique se h√° converg√™ncia ou diverg√™ncia entre a an√°lise t√©cnica e o sentimento do mercado.
    3. Forne√ßa uma recomenda√ß√£o final: **COMPRAR**, **MANTER** ou **VENDER**, justificando sua escolha com base nos dados integrados.
    4. Indique poss√≠veis riscos e pontos de aten√ß√£o a serem monitorados nas pr√≥ximas semanas.

    Utilize uma linguagem clara, objetiva e profissional.
    """,
    expected_output="""
    1. Resumo da an√°lise t√©cnica.
    2. Resumo da an√°lise de not√≠cias.
    3. Diagn√≥stico: converg√™ncia ou diverg√™ncia nas an√°lises.
    4. Recomenda√ß√£o final: COMPRAR, MANTER ou VENDER, com justificativa.
    5. Lista de riscos e pontos de aten√ß√£o.
    """,
    agent=especialista_decisao,
    output_file="recomendacao_final_btc.txt"
)

# ========== Execu√ß√£o ==========
def main():

    import logging

    crew = Crew(
        agents=[especialista_noticia, especialista_trading, especialista_decisao],
        tasks=[procurando_noticias, analise_trading, tomada_decisao],
        verbose=True,
        process=Process.sequential
    )

    logging.getLogger("crewai.llm").setLevel(logging.DEBUG)
    logging.getLogger("crewai.crew").setLevel(logging.DEBUG)

    resultado = crew.kickoff(inputs={"moeda": "BTC-USD", "periodo": "1y"})
    logging.info("=== AN√ÅLISE FINAL ===")
    print(resultado)

if __name__ == "__main__":
    main()
